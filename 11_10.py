# -*- coding: utf-8 -*-
"""11_10

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SzSc1WbHeheMLW2hxryI1Gs3MA5wtOOc

#1. Pandas 실습

##1.1 pandas 라이브러리 가져오기
"""

import pandas as pd
import numpy as np

"""##1.2 pandas 자료 구조

###1.2.1 Series
- 가장 기본이 되는 자료 구조로 1개의 열을 뜻함
"""

obj = pd.Series([10,20,np.nan,30,40])
obj, type(obj)

arr = np.arange(10,20)
obj = pd.Series(arr)
obj

obj.values

obj.index

obj = pd.Series([10,20,30,40], index=['갑','을','병','정'])
obj

data={'Seoul':350, 'Daegu':15, 'Busan':30}
data

country = pd.Series(data)
country

"""###1.2.2 Series 원소 선택"""

#country[2]
#country['Seoul']
#country[['Seoul', 'Daegu']]
country[1:3]

"""###1.2.3 DataFrame
- 행과 열로 구성된 2차원 배열
- 여러개의 Series(vector)가 모여 DataFrame(matrix)이 됨
"""

data = {'Seoul':[51621, 307], 'Daegu':[10631, 6], 'Busan':[6360,25]}
df = pd.DataFrame(data)
df

data = [['Samsung', 80400,400], ['SK', 12300, 500], ['Kakao', 15700, -2500], ['Naver', 410000, -4000]]
data

df = pd.DataFrame(data)
df

df.index = ['1st', '2nd', '3rd', '4th']
df.columns = ['title', 'price', 'change']
df

"""###1.2.4. 행과 열 삭제 - .drop()
- 행 삭제: .drop(index[ , inplace=True])
"""

df

df.drop('4th')
#df

df.drop('4th', inplace=True)
df

df.drop('price', axis=1)

df.drop('price', axis=1, inplace=True)
df

"""###1.2.5 행과 열 선택: .loc[ ], .iloc[ ]"""

data = [['Samsung', 80400,400], ['SK', 12300, 500], ['Kakao', 15700, -2500], ['Naver', 410000, -4000]]
df = pd.DataFrame(data)
df.index=['1st','2nd','3rd','4th']
df.columns=['title','price','change']
df

df['price']

"""*   행 선택


"""

df.loc['3rd']

df.iloc[2]

df.loc[['3rd', '2nd']]

df.iloc[[1,2]]

df.loc['1st':'3rd']

df.iloc[0:2]

"""* 열 선택"""

df[['title', 'price']]

#df.iloc[1,1]
#df.iloc[:,1]
df['price']

df.iloc[:,1:3]

df

#df.iloc[2,0:2]
df.iloc[2,:2]

"""###1.2.6 행과 열 추가"""

df.loc['5th'] = ['LG', 870000, 21000]
df

df['rate'] = [0.5, 0.41, -1.57, -0.97, 2.47]
df

"""#2. 데이터프레임간 연결/병합하여 데이터 가공

## 1. pandas 라이브러리로 데이터프레임 합치기
- 두 데이터프레임 만들기
"""

df1 = pd.DataFrame({
    'id':[1,2,3],
    'customer_id':[1,2,3],
    'customer_name':['Robert','Peter','Dave']
})
df1

df2 = pd.DataFrame({
    'id':[1,2,4],
    'order_id':[100,200,300],
    'order_date':['2021-01-21','2021-02-03','2020-10-01']
})
df2

"""* 두 데이터프레임 연결하기"""

pd.concat([df1, df2])

pd.concat([df1, df2], axis=1)

"""* 두 프레임 합치기(병합하기)"""

pd.merge(df1, df2)

pd.merge(df1, df2, how='outer')

pd.merge(df1, df2, how='left')

pd.merge(df1, df2, how='right')

pd.merge(df1, df2, on='id', how='inner')

pd.merge(df1, df2, on='id', how='outer')

"""# 3. 타이타닉호 데이터 분석"""

import pandas as pd
data = pd.read_csv('train.csv')
data

data.head(5)

data.tail(2)

data.info()

data['Pclass']

data['Pclass'].value_counts()

#data['Pclass'].value_counts().sort_values(ascending=False)
data['Pclass'].value_counts().sort_index()

data['Sex'].value_counts().sort_index()

data['Age'].mean()

data['Fare'].mean()

data.describe()

data['Survived']==0

data['Survived'].value_counts()

dead = data[data['Survived']==0]

survived = data[data['Survived']==1]
survived

len(dead)

len(survived)

male = data[data['Sex']=='male']
female = data[data['Sex']=='female']

len(male)

len(female)

survivedChildren = data[(data['Survived']==1) & (data['Age']<= 17)]
survivedChildren

len(survivedChildren)

children = data[data['Age'] <= 17]
len(children)

len(survivedChildren)/len(children)*100

survivedElders = data[(data['Survived']==1) & (data['Age'] >= 60)]
elders = data[data['Age'] >= 60]

#survivedElders
elders

#len(survivedElders)
len(elders)

round(len(survivedElders)/len(elders)*100, 1)

elders['Survived'].mean()

survived = data[data.Survived == 1]['Sex'].value_counts()
survived

survivedPclass = data[data.Survived == 1]['Pclass'].value_counts()
survivedPclass

survivedEmbarked = data[data.Survived == 1]['Embarked'].value_counts()
survivedEmbarked

embarked = data['Embarked'].value_counts()
embarked

print(data['Fare'].groupby(data['Pclass']).mean())

print(data['Age'].groupby(data['Sex']).mean())

data.info()

data['Cabin']

data['Age'].isnull().sum()

#data['Embarked'].isnull().sum()
data['Cabin'].isnull().sum()

#data['Age'].median()
data['Age'].mean()

data['Age'].fillna(data['Age'].median(), inplace=True)

data['Age'].isnull().sum()

data['Embarked'].value_counts().idxmax()

data['Embarked'].fillna(data['Embarked'].value_counts().idxmax(), inplace=True)

data.info()

data.dropna(axis=1, inplace=True)

data.info()

survived = data[data.Survived == 1]['Sex'].value_counts()
survived

survived.plot(kind='bar')

survived = data[data.Survived == 1]['Pclass'].value_counts()
survived.plot(kind='pie')

grouped = data['Fare'].groupby(data['Pclass']).mean()
grouped

grouped.plot(kind='line')

"""## used_car"""

import pandas as pd
car = pd.read_csv('used_car.csv')
car

car.head()

car.info()

yearPrice = car['Year'].value_counts().sort_index()

yearPrice.plot(kind='bar')

grouped = car['Price'].groupby(car['Year']).mean().sort_index()
grouped

grouped.plot(kind='line')

trans = car['Transmission'].value_counts()
trans

trans.plot(kind='pie', autopct='%0.1f%%')

"""#4. 졸음운전 데이터 분석"""

import pandas as pd
data1 = pd.read_csv('2014년 졸음운전 교통사고.csv',encoding='cp949') 
data2 = pd.read_csv('2015년 졸음운전 교통사고.csv',encoding='cp949') 
data3 = pd.read_csv('2016년 졸음운전 교통사고.csv',encoding='cp949')

data1

data2

data3

data1.set_index('구분', inplace=True)
data2.set_index('구분', inplace=True)
data3.set_index('구분', inplace=True)

